{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About RoQuery is a simple yet blazing fast module for Roblox games that allows you to do more with your code. RoQuery was first published on 7/20/21. Credits R0bl0x10501050 - Lead Maintainer jQuery - The JS library that RoQuery is based off of","title":"Home"},{"location":"#about","text":"RoQuery is a simple yet blazing fast module for Roblox games that allows you to do more with your code. RoQuery was first published on 7/20/21.","title":"About"},{"location":"#credits","text":"R0bl0x10501050 - Lead Maintainer jQuery - The JS library that RoQuery is based off of","title":"Credits"},{"location":"API/","text":"Installation Install RoQuery by requiring the module. Lua local S = require ( \"path/to/RoQuery.lua\" ) Get The Module RoQuery (BASE) RoQuery(selector) Description: The beginning constructor for RoQuery. Type: Class:Method:constructor Params: selector: string The selector used to fetch Instances from the Instance tree. Returns: ElementGroup ElementGroup (CLASS) ElementGroup:add(param) Description: Adds an instance in the Element. Type: Class:Method Params: param: string In string form, param is used to create the appropriate Instance using QuerySelector. param: table In table form, param is used to create the appropriate Instance by recreating an Instance from the table values. param: string In Instance form, param is used to create the appropriate Instance by literally using the Instance provided. Returns: ElementGroup of the new Element ElementGroup:all(get, set) Description: Gets or sets a property/attribute of the Element. Type: Class:Method Params: get: string This will check the current Element's instance for the property get . If only get is provided, this will return the value of the property. If the property doesn't exist, it will check attributes. set: any? OPTIONAL: This will check the current Element's instance for the property get . If set is provided, this will set the value of the property get to set . If the property doesn't exist, it will set an attribute. Returns: IF get AND set: ElementGroup (itself) IF get AND NOT set: any ElementGroup:attr(get, set) Description: Gets or sets an attribute of the Element. Type: Class:Method Params: get: string This will check the current Element's instance for the attribute get . If only get is provided, this will return the value of the attribute. set: any? OPTIONAL: This will check the current Element's instance for the attribute get . If set is provided, this will set the value of the attribute get to set . Returns: IF get AND set: ElementGroup (itself) IF get AND NOT set: any ElementGroup:children(selector) Description: Gets all children of the Element. Type: Class:Method Params: selector: string? OPTIONAL: The selector used to filter out the children of the current Element's instance. Returns: ElementGroup of the children ElementGroup:click(callback) Description: Adds a callback to MouseButton1Click. Equivalent to self:on(\"MouseButton1Click\", callback) . Type: Class:Method Params: callback: function Binds callback to the current Element's instance.MouseButton1Click Returns: ElementGroup (itself) ElementGroup:clone(setParentAutomatically) Description: Clones the Element. Type: Class:Method Params: setParentAutomatically: boolean If true , then new Element will be parented to the current Element. Returns: ElementGroup of the new Element ElementGroup:die() Description: Kills all connnections tied to the Element. Type: Class:Method Params: Returns: ElementGroup (itself) ElementGroup:even() Description: Returns the even-indexed Elements in the ElementGroup. Type: Class:Method Params: Returns: ElementGroup (the even-indexed entries) ElementGroup:fadeIn() Description: Fades in the Element. Type: Class:Method Params: Returns: ElementGroup (itself) ElementGroup:fadeOut() Description: Fades out the Element. Type: Class:Method Params: Returns: ElementGroup (itself) ElementGroup:fadeTo(target) Description: Fades the Element to target . Type: Class:Method Params: target: number (default: 0.5) The target transparency. Returns: ElementGroup (itself) ElementGroup:fadeToggle() Description: Toggle between invisible and visible. Type: Class:Method Params: Returns: ElementGroup (itself) ElementGroup:filter(selector) Description: Returns the current Elements that matched with the selector. Type: Class:Method Params: selector: string Selector used to filter out Elements Returns: ElementGroup (the Elements that matched with the selector) ElementGroup:first() Description: Returns the first Element (in the form of an ElementGroup) of the current ElementGroup. Type: Class:Method Params: Returns: ElementGroup (the first Element) ElementGroup:focusin(callback) Description: Adds a callback to MouseEnter. Equivalent to self:on(\"MouseEnter\", callback) . Type: Class:Method Params: callback: function Binds callback to the current Element's instance.MouseEnter Returns: ElementGroup (itself) ElementGroup:focusout(callback) Description: Adds a callback to MouseLeave. Equivalent to self:on(\"MouseLeave\", callback) . Type: Class:Method Params: callback: function Binds callback to the current Element's instance.MouseLeave Returns: ElementGroup (itself) ElementGroup:foreach(callback) Description: Call the callback on each Element in the current ElementGroup. Type: Class:Method Params: callback: function The callback that is used on each Element. The two callback's params are 1) index, and 2) the Element. Returns: Table (the return value of all the callbacks) ElementGroup:has(selector) Description: Filter out the Elements that don't have a descendant that matches the selector. Type: Class:Method Params: selector: string The selector that is used on each Element to check if it has a descendant that matches the selector. Returns: ElementGroup (itself but filtered to not include the Elements that don't have a descendant that matches the selector) ElementGroup:hide(duration) Description: Like self:fadeOut(), but time is customizable. Type: Class:Method Params: duration: number? (default: 0) Amount of time for Element to fade out. Returns: ElementGroup (itself) ElementGroup:hover(mouseIn, mouseOut) Description: Adds up to two callbacks (MouseEnter, MouseLeave). Equivalent to self:on(\"MouseEnter\", mouseIn):on(\"MouseLeave\", mouseOut) . Type: Class:Method Params: mouseIn: function Binds mouseIn to the current Element's instance.MouseEnter . mouseOut: function Binds mouseOut to the current Element's instance.MouseLeave . Returns: ElementGroup (itself) ElementGroup:is(selector) Description: Return true if at least one Elements in the ElementGroup matches the selector. Type: Class:Method Params: selector: string The selector that is used on each Element to check if it matches the selector. Returns: Boolean ElementGroup:isNot(selector) Description: Filters out Elements that DO match the selector. Type: Class:Method Params: selector: string The selector that is used on each Element to check if it matches the selector. Returns: ElementGroup (the non-matched Elements) ElementGroup:last() Description: Returns the last Element (in the form of an ElementGroup) of the current ElementGroup. Type: Class:Method Params: Returns: ElementGroup (the last Element) ElementGroup:odd() Description: Returns the odd-indexed Elements in the ElementGroup. Type: Class:Method Params: Returns: ElementGroup (the odd-indexed entries) ElementGroup:on(eventName, tagName, callback) Description: Adds a callback to event instance[eventName] . Type: Class:Method Params: eventName: string The name of the event. tagName: string The unique name of the connection (used for self:off() ). callback: function Binds callback to the current Element's instance[eventName] . Returns: ElementGroup (itself) ElementGroup:off(eventName, tagName) Description: Removes a callback from event instance[eventName] . Type: Class:Method Params: eventName: string The name of the event. tagName: string The unique name for the connection. Returns: ElementGroup (itself) ElementGroup:parent() Description: Gets the parent of the current Element. Type: Class:Method Params: Returns: ElementGroup of the parent ElementGroup:parents(selector) Description: Gets the parents of the current Element and filter out the ones that DO NOT match the selector. Type: Class:Method Params: selector: string? The selector used to filter out the parents. Returns: ElementGroup of the parents ElementGroup:parentsUntil(selector) Description: Gets the parents of the current Element until one matches the selector. Type: Class:Method Params: selector: string? The selector used as the boundary. Returns: ElementGroup of the parents ElementGroup:prop(get, set) Description: Gets or sets a property of the Element. Type: Class:Method Params: get: string This will check the current Element's instance for the property get . If only get is provided, this will return the value of the property. set: any? OPTIONAL: This will check the current Element's instance for the property get . If set is provided, this will set the value of the property get to set . Returns: IF get AND set: ElementGroup (itself) IF get AND NOT set: any ElementGroup:remove(selector) Description: Deletes the Elements that match the selector, and returns the ones that don't. Type: Class:Method Params: selector: string? The selector used as the deciding factor of whether an Element would be deleted or not. Returns: ElementGroup (the ones that weren't removed) ElementGroup:setText(text) Description: Sets the Text property of the Element. Type: Class:Method Params: text: string The string of text to set instance.Text to. Returns: ElementGroup (itself) ElementGroup:show(duration) Description: Like self:fadeIn(), but time is customizable. Type: Class:Method Params: duration: number? (default: 0) Amount of time for Element to fade in. Returns: ElementGroup (itself) ElementGroup:wait(duration) Description: Yield the current thread. Type: Class:Method Params: duration: number? (default: 0) Amount of time for the thread to yield. Returns: ElementGroup (itself)","title":"API Reference"},{"location":"API/#installation","text":"Install RoQuery by requiring the module. Lua local S = require ( \"path/to/RoQuery.lua\" ) Get The Module","title":"Installation"},{"location":"API/#roquery-base","text":"","title":"RoQuery (BASE)"},{"location":"API/#roqueryselector","text":"Description: The beginning constructor for RoQuery. Type: Class:Method:constructor Params: selector: string The selector used to fetch Instances from the Instance tree. Returns: ElementGroup","title":"RoQuery(selector)"},{"location":"API/#elementgroup-class","text":"","title":"ElementGroup (CLASS)"},{"location":"API/#elementgroupaddparam","text":"Description: Adds an instance in the Element. Type: Class:Method Params: param: string In string form, param is used to create the appropriate Instance using QuerySelector. param: table In table form, param is used to create the appropriate Instance by recreating an Instance from the table values. param: string In Instance form, param is used to create the appropriate Instance by literally using the Instance provided. Returns: ElementGroup of the new Element","title":"ElementGroup:add(param)"},{"location":"API/#elementgroupallget-set","text":"Description: Gets or sets a property/attribute of the Element. Type: Class:Method Params: get: string This will check the current Element's instance for the property get . If only get is provided, this will return the value of the property. If the property doesn't exist, it will check attributes. set: any? OPTIONAL: This will check the current Element's instance for the property get . If set is provided, this will set the value of the property get to set . If the property doesn't exist, it will set an attribute. Returns: IF get AND set: ElementGroup (itself) IF get AND NOT set: any","title":"ElementGroup:all(get, set)"},{"location":"API/#elementgroupattrget-set","text":"Description: Gets or sets an attribute of the Element. Type: Class:Method Params: get: string This will check the current Element's instance for the attribute get . If only get is provided, this will return the value of the attribute. set: any? OPTIONAL: This will check the current Element's instance for the attribute get . If set is provided, this will set the value of the attribute get to set . Returns: IF get AND set: ElementGroup (itself) IF get AND NOT set: any","title":"ElementGroup:attr(get, set)"},{"location":"API/#elementgroupchildrenselector","text":"Description: Gets all children of the Element. Type: Class:Method Params: selector: string? OPTIONAL: The selector used to filter out the children of the current Element's instance. Returns: ElementGroup of the children","title":"ElementGroup:children(selector)"},{"location":"API/#elementgroupclickcallback","text":"Description: Adds a callback to MouseButton1Click. Equivalent to self:on(\"MouseButton1Click\", callback) . Type: Class:Method Params: callback: function Binds callback to the current Element's instance.MouseButton1Click Returns: ElementGroup (itself)","title":"ElementGroup:click(callback)"},{"location":"API/#elementgroupclonesetparentautomatically","text":"Description: Clones the Element. Type: Class:Method Params: setParentAutomatically: boolean If true , then new Element will be parented to the current Element. Returns: ElementGroup of the new Element","title":"ElementGroup:clone(setParentAutomatically)"},{"location":"API/#elementgroupdie","text":"Description: Kills all connnections tied to the Element. Type: Class:Method Params: Returns: ElementGroup (itself)","title":"ElementGroup:die()"},{"location":"API/#elementgroupeven","text":"Description: Returns the even-indexed Elements in the ElementGroup. Type: Class:Method Params: Returns: ElementGroup (the even-indexed entries)","title":"ElementGroup:even()"},{"location":"API/#elementgroupfadein","text":"Description: Fades in the Element. Type: Class:Method Params: Returns: ElementGroup (itself)","title":"ElementGroup:fadeIn()"},{"location":"API/#elementgroupfadeout","text":"Description: Fades out the Element. Type: Class:Method Params: Returns: ElementGroup (itself)","title":"ElementGroup:fadeOut()"},{"location":"API/#elementgroupfadetotarget","text":"Description: Fades the Element to target . Type: Class:Method Params: target: number (default: 0.5) The target transparency. Returns: ElementGroup (itself)","title":"ElementGroup:fadeTo(target)"},{"location":"API/#elementgroupfadetoggle","text":"Description: Toggle between invisible and visible. Type: Class:Method Params: Returns: ElementGroup (itself)","title":"ElementGroup:fadeToggle()"},{"location":"API/#elementgroupfilterselector","text":"Description: Returns the current Elements that matched with the selector. Type: Class:Method Params: selector: string Selector used to filter out Elements Returns: ElementGroup (the Elements that matched with the selector)","title":"ElementGroup:filter(selector)"},{"location":"API/#elementgroupfirst","text":"Description: Returns the first Element (in the form of an ElementGroup) of the current ElementGroup. Type: Class:Method Params: Returns: ElementGroup (the first Element)","title":"ElementGroup:first()"},{"location":"API/#elementgroupfocusincallback","text":"Description: Adds a callback to MouseEnter. Equivalent to self:on(\"MouseEnter\", callback) . Type: Class:Method Params: callback: function Binds callback to the current Element's instance.MouseEnter Returns: ElementGroup (itself)","title":"ElementGroup:focusin(callback)"},{"location":"API/#elementgroupfocusoutcallback","text":"Description: Adds a callback to MouseLeave. Equivalent to self:on(\"MouseLeave\", callback) . Type: Class:Method Params: callback: function Binds callback to the current Element's instance.MouseLeave Returns: ElementGroup (itself)","title":"ElementGroup:focusout(callback)"},{"location":"API/#elementgroupforeachcallback","text":"Description: Call the callback on each Element in the current ElementGroup. Type: Class:Method Params: callback: function The callback that is used on each Element. The two callback's params are 1) index, and 2) the Element. Returns: Table (the return value of all the callbacks)","title":"ElementGroup:foreach(callback)"},{"location":"API/#elementgrouphasselector","text":"Description: Filter out the Elements that don't have a descendant that matches the selector. Type: Class:Method Params: selector: string The selector that is used on each Element to check if it has a descendant that matches the selector. Returns: ElementGroup (itself but filtered to not include the Elements that don't have a descendant that matches the selector)","title":"ElementGroup:has(selector)"},{"location":"API/#elementgrouphideduration","text":"Description: Like self:fadeOut(), but time is customizable. Type: Class:Method Params: duration: number? (default: 0) Amount of time for Element to fade out. Returns: ElementGroup (itself)","title":"ElementGroup:hide(duration)"},{"location":"API/#elementgrouphovermousein-mouseout","text":"Description: Adds up to two callbacks (MouseEnter, MouseLeave). Equivalent to self:on(\"MouseEnter\", mouseIn):on(\"MouseLeave\", mouseOut) . Type: Class:Method Params: mouseIn: function Binds mouseIn to the current Element's instance.MouseEnter . mouseOut: function Binds mouseOut to the current Element's instance.MouseLeave . Returns: ElementGroup (itself)","title":"ElementGroup:hover(mouseIn, mouseOut)"},{"location":"API/#elementgroupisselector","text":"Description: Return true if at least one Elements in the ElementGroup matches the selector. Type: Class:Method Params: selector: string The selector that is used on each Element to check if it matches the selector. Returns: Boolean","title":"ElementGroup:is(selector)"},{"location":"API/#elementgroupisnotselector","text":"Description: Filters out Elements that DO match the selector. Type: Class:Method Params: selector: string The selector that is used on each Element to check if it matches the selector. Returns: ElementGroup (the non-matched Elements)","title":"ElementGroup:isNot(selector)"},{"location":"API/#elementgrouplast","text":"Description: Returns the last Element (in the form of an ElementGroup) of the current ElementGroup. Type: Class:Method Params: Returns: ElementGroup (the last Element)","title":"ElementGroup:last()"},{"location":"API/#elementgroupodd","text":"Description: Returns the odd-indexed Elements in the ElementGroup. Type: Class:Method Params: Returns: ElementGroup (the odd-indexed entries)","title":"ElementGroup:odd()"},{"location":"API/#elementgrouponeventname-tagname-callback","text":"Description: Adds a callback to event instance[eventName] . Type: Class:Method Params: eventName: string The name of the event. tagName: string The unique name of the connection (used for self:off() ). callback: function Binds callback to the current Element's instance[eventName] . Returns: ElementGroup (itself)","title":"ElementGroup:on(eventName, tagName, callback)"},{"location":"API/#elementgroupoffeventname-tagname","text":"Description: Removes a callback from event instance[eventName] . Type: Class:Method Params: eventName: string The name of the event. tagName: string The unique name for the connection. Returns: ElementGroup (itself)","title":"ElementGroup:off(eventName, tagName)"},{"location":"API/#elementgroupparent","text":"Description: Gets the parent of the current Element. Type: Class:Method Params: Returns: ElementGroup of the parent","title":"ElementGroup:parent()"},{"location":"API/#elementgroupparentsselector","text":"Description: Gets the parents of the current Element and filter out the ones that DO NOT match the selector. Type: Class:Method Params: selector: string? The selector used to filter out the parents. Returns: ElementGroup of the parents","title":"ElementGroup:parents(selector)"},{"location":"API/#elementgroupparentsuntilselector","text":"Description: Gets the parents of the current Element until one matches the selector. Type: Class:Method Params: selector: string? The selector used as the boundary. Returns: ElementGroup of the parents","title":"ElementGroup:parentsUntil(selector)"},{"location":"API/#elementgrouppropget-set","text":"Description: Gets or sets a property of the Element. Type: Class:Method Params: get: string This will check the current Element's instance for the property get . If only get is provided, this will return the value of the property. set: any? OPTIONAL: This will check the current Element's instance for the property get . If set is provided, this will set the value of the property get to set . Returns: IF get AND set: ElementGroup (itself) IF get AND NOT set: any","title":"ElementGroup:prop(get, set)"},{"location":"API/#elementgroupremoveselector","text":"Description: Deletes the Elements that match the selector, and returns the ones that don't. Type: Class:Method Params: selector: string? The selector used as the deciding factor of whether an Element would be deleted or not. Returns: ElementGroup (the ones that weren't removed)","title":"ElementGroup:remove(selector)"},{"location":"API/#elementgroupsettexttext","text":"Description: Sets the Text property of the Element. Type: Class:Method Params: text: string The string of text to set instance.Text to. Returns: ElementGroup (itself)","title":"ElementGroup:setText(text)"},{"location":"API/#elementgroupshowduration","text":"Description: Like self:fadeIn(), but time is customizable. Type: Class:Method Params: duration: number? (default: 0) Amount of time for Element to fade in. Returns: ElementGroup (itself)","title":"ElementGroup:show(duration)"},{"location":"API/#elementgroupwaitduration","text":"Description: Yield the current thread. Type: Class:Method Params: duration: number? (default: 0) Amount of time for the thread to yield. Returns: ElementGroup (itself)","title":"ElementGroup:wait(duration)"},{"location":"QuerySelecting/","text":"How QuerySelecting Works Note: If you know CSS, this should be a piece of cake - literally. \ud83c\udf70 Consider the following string: \"baseplate.part part.part#somerandomid\" This is an example of a valid selector. Let's break it down. baseplate.part baseplate = Name of the Instance (case-insensitive) .part = ClassName of the Instance (case-insensitive) part.part#somerandomid Since this comes after the first query, it means that it will only return part.part#somerandomid elements that are descendants of baseplate.part . part = Name of the Instance (case-insensitive) .part = ClassName of the Instance (case-insensitive) #somerandomid = ROQUERY_ID (attribute) of the Instance (case-insensitive) How To Set A RoQuery ID To set a RoQuery ID that can be recognized by the QuerySelector, create a new attribute called \"ROQUERY_ID\" (case-sensitive) and set the value to whatever you want the ID to be. This expression would return any Instance that 1) has a parent that is of class \"Part\" and named \"baseplate\" (case-insensitive) and 2) is of class \"Part\", named \"Part\" (case-insensitive), and has a RoQuery ID of \"somerandomid\" (case-insensitive).","title":"How To Query"},{"location":"QuerySelecting/#how-queryselecting-works","text":"Note: If you know CSS, this should be a piece of cake - literally. \ud83c\udf70 Consider the following string: \"baseplate.part part.part#somerandomid\" This is an example of a valid selector. Let's break it down. baseplate.part baseplate = Name of the Instance (case-insensitive) .part = ClassName of the Instance (case-insensitive) part.part#somerandomid Since this comes after the first query, it means that it will only return part.part#somerandomid elements that are descendants of baseplate.part . part = Name of the Instance (case-insensitive) .part = ClassName of the Instance (case-insensitive) #somerandomid = ROQUERY_ID (attribute) of the Instance (case-insensitive) How To Set A RoQuery ID To set a RoQuery ID that can be recognized by the QuerySelector, create a new attribute called \"ROQUERY_ID\" (case-sensitive) and set the value to whatever you want the ID to be. This expression would return any Instance that 1) has a parent that is of class \"Part\" and named \"baseplate\" (case-insensitive) and 2) is of class \"Part\", named \"Part\" (case-insensitive), and has a RoQuery ID of \"somerandomid\" (case-insensitive).","title":"How QuerySelecting Works"},{"location":"examples/","text":"Print A Part's Ancestors Lua S ( '.model#model .part .part .part .part' ): parents (): foreach ( function ( i , v ) print ( v ) end ) Name All Parts \"Thingy\" (Except HRP) Lua S ( '.part' ): isNot ( 'humanoidrootpart.part' ): prop ( \"Name\" , \"Thingy\" ) Those are just a few example of what you can do with RoQuery!","title":"Examples"},{"location":"examples/#print-a-parts-ancestors","text":"Lua S ( '.model#model .part .part .part .part' ): parents (): foreach ( function ( i , v ) print ( v ) end )","title":"Print A Part's Ancestors"},{"location":"examples/#name-all-parts-thingy-except-hrp","text":"Lua S ( '.part' ): isNot ( 'humanoidrootpart.part' ): prop ( \"Name\" , \"Thingy\" ) Those are just a few example of what you can do with RoQuery!","title":"Name All Parts \"Thingy\" (Except HRP)"}]}